/*
 * C++ class for entity "${entity.name}" 
 * Created on $now.date ( $now.time ) generated by $generator.name ( version $generator.version )
 */
##--------------------------------------------------------------------------------------------------
#set($env.language = "C++")
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------

${SHARP}include <iostream>
using namespace std;

class ${entity.name} {
  public:
    // Entity Primary Key
#foreach( $attrib in $entity.keyAttributes )
#if ($attrib.type != "" )
    $attrib.formattedType(10) $attrib.name ;
#else
    // no C++ type for $attrib.name ($attrib.neutralType)
#end
#end
    // Entity other fields
#foreach( $attrib in $dataFields )
#if ($attrib.type != "" )
    $attrib.formattedType(10) $attrib.name ;
#else
    // no C++ type for $attrib.name ($attrib.neutralType)
#end
#end
    // Entity links
#foreach( $link in $entity.selectedLinks )
    // ${link.fieldType} $link.fieldName
#end

    // Constructor
    ${entity.name}() {  
        cout << "Constructor \n";
    }

    // Destructor
    ~${entity.name}() {  
        cout << "Destructor \n";
    }
    
    void method1() { // method inside class
        cout << "method #1 \n";
    }

    void method2(); // method outside class
};

// Method/function definition outside the class
void ${entity.name}::method2() {
    cout << "method #2 \n";
}

int main() {
  cout << "Running main for ${entity.name} \n";  
  ${entity.name} o; // Create a new object of ${entity.name} (call constructor)
  o.method1();
  o.method2();
  return 0;
}
